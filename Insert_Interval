/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:

    struct Compare{
        bool operator() (const Interval& a, const Interval& b){
            return a.start<b.start;
        }
    }compare;
    
    
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        intervals.push_back(newInterval);
        sort(intervals.begin(), intervals.end(), compare);
        vector<Interval> result;
        int s, t;

      result.clear();
		if (intervals.size() == 0) {
			return result;
		}
		s = intervals[0].start;
		t = intervals[0].end;
		for (unsigned i = 0; i < intervals.size(); i++) {
			if (intervals[i].start <= t) {
				t = max(t, intervals[i].end);
				continue;
			}
			result.push_back(Interval(s, t));
			s = intervals[i].start;
			t = intervals[i].end;
		}
		result.push_back(Interval(s, t));

		return result;
    }
};
